@{
    ViewBag.Title = "LoadTravel";
}

<style>
    .canvas {
        background-image: url("/Content/export-map-share.png");
        background-size: 100% 100%;
    }
</style>


<canvas class="canvas" id="canvas"></canvas>

<script>
    // Global variables - contain current and recent coordinates after and before normalization
    var oldLon, newLon, oldLat, newLat;
    // Current coordinate number (index)
    var lineNum = 1;

    initScreen();
    drawPoint();
    myInterval = setInterval(myTimer, 1000 * @ViewBag.Frequency);

    /*
     * Gets a new updated coordinate.
     * Draws a line connecting current and recent coordinate.
     */
    function myTimer() {
        var c = document.getElementById("canvas");
        var ctx = c.getContext("2d");

        // Gets new coordinate from flight file using ajax POST
        $.post("@(Url.Action("LoadFromFile", "Main"))", { filename: "@ViewBag.Filename", lineNumber: lineNum }).done(function (data) {
            // End of file
            if (data == null || data == "") {
                alert("Travel display has ended.");
                clearInterval(myInterval);
            }

            // Process data and normalize data
            var i = data.indexOf(" "), l = data.length;
            newLon = normalizeLon(parseFloat(data.substring(0, i)));
            newLat = normalizeLat(parseFloat(data.substring(i + 1, l)));

            // Draw a line
            drawLine(oldLon, oldLat, newLon, newLat);

            // Update recent coordinate
            oldLon = newLon;
            oldLat = newLat;
        });

        lineNum = lineNum + 1;
    }

    /*
     * Initialize the canvas (size and position).
     */
    function initScreen() {
        var c = document.getElementById("canvas");

        c.width = window.innerWidth;
        c.height = window.innerHeight;

        c.style.left = "0px";
        c.style.top = "0px";
        c.style.position = "absolute";
    }

    /*
     * Normalize longitude according to canvas size.
     */
    function normalizeLon (value) {
        return (value + 180) * (window.innerWidth / 360);
    }

    /*
     * Normalize latitude according to canvas size.
     */
    function normalizeLat(value) {
        return (value + 90) * (window.innerHeight / 180);
    }

    /*
     * Gets a new updated coordinate.
     * Draws a point showing current coordinate.
     */
    function drawPoint() {
        var c = document.getElementById("canvas");
        var ctx = c.getContext("2d");

        // Gets new coordinate from flight file using ajax POST
        $.post("@(Url.Action("LoadFromFile", "Main"))", { filename: "@ViewBag.Filename", lineNumber: lineNum }).done(function (data) {
            var i = data.indexOf(" "), l = data.length;
            // Process data and normalize data
            var lon = normalizeLon(parseFloat(data.substring(0, i)));
            var lat = normalizeLat(parseFloat(data.substring(i + 1, l)));

            // Drawing black-red point on canvas
            // Big black dot
            ctx.beginPath();
            ctx.arc(lon, lat, 12, 0, 2 * Math.PI);
            ctx.fillStyle = "black";
            ctx.fill();

            // Small red dot
            ctx.beginPath();
            ctx.arc(lon, lat, 9, 0, 2 * Math.PI);
            ctx.fillStyle = "red";
            ctx.fill();

            // Update recent coordinate
            oldLon = lon;
            oldLat = lat;
            newLon = lon;
            newLat = lat;
        });

        lineNum = lineNum + 1;
    }

    /*
     * Draws a line between 2 points on canvas.
     */
    function drawLine(x1, y1, x2, y2) {
        var c = document.getElementById("canvas");
        var ctx = c.getContext("2d");

        // Draws a red line
        ctx.strokeStyle = "red";
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
    }
</script>